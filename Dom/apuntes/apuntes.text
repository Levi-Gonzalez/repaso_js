# Static,es una variable y se declara antes del constructor. (Verlo en POO)

"\n" Esto código nos permite escribir uno abajo de otro
→¦→ (no tiene nada que ver pero me gustó ) :P
For y While

For es un bucle numerico y While es un bucle condicional

For: le decimos cuantas vueltas le damos.

while: (MIENTRAS)
depende de una condicion, mientras la condicion sea "T" el bucle da vueltas, cuando deja de serlo el bucle termina
como lo hacemos? cambiando el valor.
Tenemos que forzarlo con un valor inicial es decir :

Let nombre = "pepe" , Let sumaTotal = 0
lo forzamos dandole un valor para que empiece dar sus vueltas

Diferencias entre While y Do
While: Primero pregunta a la condición despues ejecuta el cuerpo.
ej: ESC. Termina la condicion es decir nunca se ejecuta
Do: va primero, antes que el while, Da una vuelta al código, primero hace el cuerpo y depués pregunta a la condición
ej: ESC. → Hola, bienvenido ESC. y termina el bucle
DO. (HACER MIENTRAS)

Funciones:😎
Si una función es una sola línea con retorno y un parámetro puede evitar escribir los ()

Objetos:🎇

# METODO : es una funcion que se encuentra dentro de un objeto, funcion propia de un objeto o miembro de un objeto

SON LO MISMO PERO LAS DIFERENCIAS SON ↓

# Diferencias entre metodos y funciones: accedemos al metodo através de un objeto en cambio una funcion podemos acceder desde cualquier lado

definición de CLASE: Plano para construír un objetos.

- Las clases comienzan en mayúsculas. ej : Alumno-coder, Usuario, Empleado-home, Programador-developer etc.
- NO es una función, es una clase.
- La clase está compuesta por una función constructora, es el encargado de hacer los seteos iniciales.

Para que los datos no sean accesibles desde afuera por usar clases:

# Get y Set : se encargan de setear variables.

# Getters: Trae los datos, volvemos asignar los parametros con :

get_datos()
{

- console.log("nombre", this.nombre)
- console.log("apellido" this.apellido)
- console.log("Email" this.email)  
}

  alumno_uno.get_datos ();
  llamamos al metodo y se encarga de traer los datos del alumno.

  si después necesito acceder al usuario tendría que invocar la función
  Usuario.get_datos();

# Setters: Setea los datos, evita que asignen y accediendo a las propiedades.

# Arrays 😉

Metodos de array, si queremos acceder a un metodo de un array tenemos que crear un objeto antes
Push,

-Pueden almacenar gran variedad de tipo objetos (String, number) o tambien un array.
-Dinamismo de tipo/equipado: las variables nunca son fijas, cambian de tipo, es decir si ponemos un valor nuevo
no queda ese valor se superpone que es distinto entonces:
NO SE PUEDE ASIGNAR DIRECTO, PORQUE PISO EL ARREGLO
-Son objetos iterables, significa que permite usar distintas estructuras para iterar sobre ellos.  
¿como se accede a los arreglos?
Atraves de sus indices



\*/

# # EJERCICIOS

let numero1 = prompt ("ingrese primer numero")
numero1 = parseInt (numero1)
let numero2 = prompt ("ingrese segundo numero")
numero2 = parseInt (numero2)

let operacion = prompt ("ingrese: + | - | \* | /")

if ( operacion == "+" ){
console.log("El resultado de la suma es:" , numero1 + numero2);

}
else if ( operacion == "-" ){
console.log("El resultado de la resta es: " , numero1 - numero2);

}
else if ( operacion == "_" ){
console.log("El resultado de la multiplicacion es: " , numero1 _ numero2);

}
else if ( operacion == "/" ){
console.log("El resultado de la división es: " , numero1 / numero2);

}
else{
console.log("operacion no encontrada");
}

let edad = prompt ("Ingrese edad")
edad = parseInt (edad)

let tutor = prompt("Vino con tutor? SI o NO")

if (edad >= 18) {
console.log("Usteded puede ingresar");
}
else if (edad >= 16 && tutor == "SI" && tutor =="NO") {
console.log("Si viene con tutor puede ingresar");
}
else (edad < 18 ) {
console.log("Ustdes NO puede ingresar");
}

let numero1 = prompt ("INngrese numero")

if (numero1 <= 10 || numero1 >= 50){
console.log("Bienvenido/a");
}
else if (numero1 < 1000)
console.log("hasta luego");

let saludar = prompt ("salude")

if (saludar == "Hola")
{
console.log("Hola :)");
}
else {
console.log(":(" );
}

let nombreUsuario = prompt ("ingrese nombre");
let nombre = "Bart"

if (nombreUsuario == nombre)
{
console.log("fui yo");
}
else{
console.log("yo no fui");
}
2
const tecla1 = prompt ("Ingrese una tecla")
if ((tecla1=="y") || (tecla1 == "Y")) {
console.log("CORRECTO");
}
else{
console.log("INCORRECTO");
}
3
const personaje = prompt ("Presiona una tecla del 1 al 4")

if (personaje == 1) {
console.log("Elegiste a Homero");
}
else if (personaje == 2) {
console.log("Elegiste a Marge");
}
else if (personaje == 3) {
console.log("Elegiste a Bart");
}
else if (personaje == 4) {
console.log("Elegiste a Lisa");
}
else{
console.log("Incorrecto!");
}
4
const valor = prompt ("ingrese numero")

if ((valor>=0) && (valor<=1000)) {
console.log("presupuesto bajo");
}
else if ((valor>=1001) && (valor<=3000)) {
console.log("presupuesto medio");
}
else if (valor>3000) {
console.log("presupuesto alto");
}
5
const productos = prompt ("agregar producto")
const productos2 = prompt ("agregar producto")
const productos3 = prompt ("agregar producto")
const productos4 = prompt ("agregar producto")

if ((productos != "") && (productos2 != "") && (productos3 != "") && (productos4 != ""))
{
const carrito =
"(1 " + productos + " " +
"(2 " + productos2 + " " +
"(3 " + productos3 + " " +
"(4 " + productos4 + " l"
console.log(carrito);
}
else (productos < 4)
{
console.log("incorrecto, debes llenar el carrito");
}

for (let i = 0; i <= 10; i++) {

    let numero = prompt ("ingrese numero")
         numero = parseInt (numero);

    if( numero < 0){
        console.log(numero , "es un numero negativo");
    }
    else if (numero >= 0){
        console.log(numero , "es un numero positivo");
    }
    else{
        console.log("ingrese un numero" , numero);
    }

}

for (let index = 0; index < 5; index++) {
let a = prompt ("Ingrese primer numero")
a = parseInt (a)
let b = prompt ("Ingrese segundo numero")  
 b = parseInt (b)

    if ( b == 0){
        console.log("no se puede dividir por 0");
        break
    }

    console.log("el resultado es: " , a/b);

}
let sumaTotal = 0;

while ( sumaTotal <= 100) {
let numero = parseInt (prompt ("Ingrese numero"))
sumaTotal = sumaTotal + numero;
console.log("el valor momentaneo es de :" , sumaTotal);
}

for (let i = 0; i <= 10; i++) {

    const saludar =prompt ("Ingrese numero");
    let numero =
    numero = numero + 1;

    console.log("el numero siguiente es:" , numero);

}

Ejercicio con Profesor Santiago Ávila

let calculadora = prompt(` 1) + 2) - 3) x 4) / 5)fin`)

while (calculadora!=="fin")
{
calculadora = prompt (` 1) + 2) - 3) x 4) / 5)fin`)

    if  ( calculadora !== "+" &&
         calculadora !== "-" &&
         calculadora !== "x" &&
         calculadora !== "/"
        )
    {
        alert("Opcion incorrecta");
    }
    else if (calculadora === "+") {
        let pedirNumero = parseInt(prompt("Ingrese numero"))
        let resultado = 0;
        let contador = 1;

        while (contador <= pedirNumero)
        {
            resultado = contador++
        }
        alert (resultado)
    }

}

let deTodo = [];

let edades = [5, 1, 2, 6, 10]

let frutas = ["Uva", "Frutilla", "Banana", "Pomelo"]

let random = ["Uva", 2, "Frutilla", true]
console.log(random);

random [0] = "Pepino"
console.log(random);

# 5

/ // Objetos.
// let perroUno = {
// raza: "pitbull",
// nombre: "jagger",
// color: "negro",
// dueño: "Levi",

// ladrar: function () {
// console.log( "Pitbull:Guau, Guau");
// }
// }
// let perroDos = {
// raza: "Mestizo",
// nombre: "Coraje",
// color: "Violeta",
// dueño: "Muriel",

// ladrar: function () {
// console.log( "Coraje: Guau, Guau");
// }
// }

// perroUno.ladrar()
// perroDos.ladrar()

//Funcion constructora ---------------

// function alumnos ( nombre, grado, seccion) {
// this.nombre = nombre
// this.grado = grado
// this.seccion = seccion
// }

// let colegioA = new alumnos ("andre", "4to", "A")
// let colegioB = new alumnos ("jere", "4to", "B")
// let colegioC = new alumnos ("santi", "4to", "C")

// console.log(colegioA.nombre);
// console.log(colegioB.nombre);
// console.log(colegioC.nombre);

// console.log(info.nombre);,
// console.log(info.apellido);
// console.log(info.edad);

// console.log(info2.nombre);
// console.log(info2.apellido);
// console.log(info2.edad);

// console.log(info3.nombre);
// console.log(info3.apellido);
// console.log(info3.edad);

// let globos = {
// rojo: 8,
// azul: 10,
// verde: 5,
// amarillo: 6,
// rosa:3
// };

// let globosCantidad = 0;

// for (const color in globos) {
// console.log(color) ; //→ Nos dira los colores de los globos
// globosCantidad += globos[color]
// }
// console.log(globosCantidad); //cantidad total de los globos

// class Productos {

// constructor (nombre, precio, stock)
// {
// this.nombre = nombre
// this.precio = precio
// this.stock = stock
// this.nota_uno;
// this.nota_dos;
// }

// saludar (){
// console.log("Hola, el producto que lleva es: 😀" , this.nombre);
// }

// get_datos (){
// console.log("nombre", this.nombre);
// console.log("precio", this.precio);
// console.log("stock", this.stock);
// }

// set_nota_uno (nota) {
// this.nota_uno = nota
// }
// set_nota_dos (nota){
// this.nota_dos = nota
// }
// }

// let productoUno = new Productos ("Oreo" , "$250" , true)
// let productoDos = new Productos ("Papas" , "$100" , true)
// let productoTres = new Productos ("Coca" , "$350" , true)
// let productoCuatro = new Productos ("Helado" , "$150" , false)

// // console.log(productoUno);
// // console.log(productoDos);
// // console.log(productoTres);
// // console.log(productoCuatro);

// let nota_uno = parseInt(prompt("Ingrese nota 1"))
// let nota_dos = parseInt(prompt("Ingrese nota 2"))

// productoTres.get_datos();
// console.log("GET DATOS ↑");
// productoUno.saludar()
// productoDos.saludar()

# 6

// class Personajes {

// constructor (nombre, poder){
// this.nombre = nombre
// this.poder = poder
// }
// }

// let miPersonajeX = []

// for (let i = 0; i < 2; i++) {

// let nombre = prompt ("Ingrese nombre personaje")
// let poder = prompt ("ingrese poder personaje")

// let nuevoPersonaje = new Personajes (nombre, poder)

// miPersonajeX.push(nuevoPersonaje)
// }

// console.log(miPersonajeX);

// for (const recorrer of miPersonajeX) {
// console.log(recorrer);

// }

// fetch

// function entrada() {
// return parseInt(prompt ("ingrese valor"))
// }
// function adivinar (valor) {
// return ("LA ENTRADA ES: " + valor)
// }
// function salida (valor) {
// alert (valor)
// }

// salida (adivinar(entrada()))

class Personajes {

    constructor (nombre, apellido, edad){
        this.nombre = nombre
        this.apellido = apellido
        this.edad = edad
    }

}

let personajesFavoritos = []

for (let i = 0; i < 2 ; i++) {

    let nombre = prompt ("Ingrese nombre")
    let apellido = prompt ("Ingrese apellido")
    let edad = parseInt (prompt ("Ingrese edad"))

    let nuevoPersonaje = new Personajes (nombre , apellido, edad)

    personajesFavoritos.push(nuevoPersonaje)

}

//nombre de referencia ↓  
for (const random of personajesFavoritos) // ← nombre de la lista/array que va a recorrer
{
console.log(random);
}
// FOR OF recorre y separa los objetos por separados.

// function sumar(primerNumero, segundoNumero) {
// return primerNumero + segundoNumero;
// }
// let resultado = sumar(2, 8);

// function mostrar (mensaje) {
// console.log(mensaje);
// }
// mostrar(resultado)

// const listaObjetos = [];
// let cantidad = 3;
// do{
// let entrada = prompt ("ingrese objeto")
// listaObjetos.push(entrada.toUpperCase())
// console.log(listaObjetos.length);
// }
// while (listaObjetos.length!= cantidad)
// let nuevaLista = listaObjetos.concat(["Bastiiii", 10, true])

// alert(nuevaLista.join(",\n"))

// class Tienda {
// constructor (nombre, ubicacion, direccion){

// this.nombre = nombre
// this.ubicacion = ubicacion
// this.direccion = direccion
// }
// }

// let tiendaVacia = []

// for (let index = 0; index < 2; index++) {

// let tienda = new Tienda ( prompt("Nombre"),
// prompt ("Ubicacion"),
// prompt ("Dirección"));

// tiendaVacia += "Tienda:" + tienda.nombre + " " +
// "Ubicacion:" + tienda.ubicacion + " " +
// "Direccion:" + tienda.direccion + " " + "\n"

// }

// alert(tiendaVacia)

// let objeto1 = {id: 1 , producto:"Arroz"}
// let array = [objeto1, {id:2, producto:"Fideos"}]
// array.push ({id: 3, producto: "Milanesas"})
// array.push ({id:4, producto: "limon"})

// for (const producto of array) {
// console.log(producto.id);
// console.log(producto.producto);  
// }

// class Producto {
// constructor(nombre, precio) {
// this.nombre = nombre.toUpperCase();
// this.precio = parseFloat(precio);
// this.vendido = false;
// }
// sumaIva() {
// this.precio = this.precio \* 1.21;
// }
// }
// //Declaramos un array de productos para almacenar objetos
// const productos = [];
// productos.push(new Producto("arroz", "125"));
// productos.push(new Producto("fideo", "70"));
// productos.push(new Producto("pan", "50"));
// //Iteramos el array con for...of para modificarlos a todos
// for (const producto of productos){
// producto.sumaIva();
// }
// console.log(productos);

// class Ciber {

// constructor(nombre, direccion)
// {
// this.nombre = nombre
// this.direccion = direccion
// }

// estaAbierto (hora)
// {

// if (((hora>=8) && (hora<=12) || (hora>=15) && (hora<=19)))
// {
// return true
// }
// {
// return false
// }
// }
// }

// let ciber4 = new Ciber ("ciberCesar" , "Guernica")

// for (let index = 0; index < 3; index++) {
// let pregunta = parseInt(prompt ("ingrese hora"))

// if (ciber4.estaAbierto(pregunta))
// {
// alert (pregunta + " " + "ESTA ABIERTO")
// }
// else
// {
// alert (pregunta + " " + "ESTA CERRADO")
// }
// }

// class Producto {
// constructor(nombre, precio) {
// this.nombre = nombre.toUpperCase();
// this.precio = parseFloat(precio);
// this.vendido = true;
// }
// sumaIva() {
// this.precio = this.precio \* 1.21;
// }
// }
// //Declaramos un array de productos para almacenar objetos
// const productos = [];
// productos.push(new Producto("arroz", "125"));
// productos.push(new Producto("fideo", "70"));
// productos.push(new Producto("pan", "50"));
// //Iteramos el array con for...of para modificarlos a todos
// for (const producto of productos)
// console.log(producto);

// producto.sumaIva();

// class Tienda{
// constructor(nombre, direccion, propietario, rubro){
// this.nombre = nombre;
// this.direccion = direccion;
// this.propietario = propietario;
// this.rubro = rubro;
// }
// esPropietario(nombre){
// return this.propietario == nombre;
// }
// }
// const tienda1 = new Tienda("Kwik-E-Mart", "Park 123", "Apu", "Almacen");
// const tienda2 = new Tienda("Edna's Edibles", "PEREZ 323", "Edna Krabappel", "Panaderia");
// const tienda3 = new Tienda("Springfield Mall", "Hall 231", "Mr. Burns", "Shopping");
// for (let index = 0; index < 5; index++) {
// let entrada = prompt("INGRESAR NOMBRE DE PROPITARIO");
// if (tienda1.esPropietario(entrada)){
// alert(entrada + " ES PROPIETARIO DE LA TIENDA " + tienda1.nombre);
// }
// if (tienda2.esPropietario(entrada)){
// alert(entrada + " ES PROPIETARIO DE LA TIENDA " + tienda2.nombre);
// }
// if (tienda3.esPropietario(entrada)){
// alert(entrada + " ES PROPIETARIO DE LA TIENDA " + tienda3.nombre);
// }
// }

let listaDeUsuarios = [ "Basti", "Flor", "Jere", "Iara", "Santi", "Joel"];

console.log(listaDeUsuarios[1] + listaDeUsuarios[3]); //concatenan

console.log(listaDeUsuarios.length); //longitud

console.log(listaDeUsuarios[listaDeUsuarios.length-1]); //accedemos a la ultima cadena

//PUSH
listaDeUsuarios.push("Fernando", "Rosana"); // metodo push, agrega al final
console.log(listaDeUsuarios); // RESULTADO DESPUES DEL PUSH

//UNSHIFT
listaDeUsuarios.unshift ( "Blanca") //metodo unshift, agrega al principio

//POP
listaDeUsuarios.pop() //No lo elimina, lo saca y lo retonrna.
console.log("POP" , listaDeUsuarios);

//SHIFT
listaDeUsuarios.shift() //Saca al primero
console.log("SHIFT" , listaDeUsuarios);

//SPLICE
listaDeUsuarios.splice(2,1 , "valor-Agregado-con-splice") //Saca la cantidad que yo quiera atraves de parametros, el 1er parametro nos dice DESDE y el 2do CUANTOS.
//Y desde esa posicion tambien podemos agregar un nuevo valor
console.log("SPLICE", listaDeUsuarios);

//JOIN
let resultado = listaDeUsuarios.join (" | ") //transforma todos los elemtos del array en un string y su funcion es con que caracterer separo cada string
console.log("JOIN:" , resultado);
console.log("Join:", listaDeUsuarios.join (" \*\*\* "));

//CONCAT
let colores = ["Azul", "Amarillo" , "Rojo"] //fusiona 2 arrays en uno nuevo, es decir habría un 3er array nuevo, el que va ultimo se agrega a lo ultimo.
let nuevaLista = listaDeUsuarios.concat(colores)
console.log("CONCAT:" , nuevaLista);

//SLICE
let corte = nuevaLista.slice (2,4) //Corta desde el numero indicado Hasta el otro, el ULTIMO NO ESTA INCLUIDO, por lo que es el anterior al ultimo
//luego retorna los que corto mostrandolos en consola
console.log("SLICE:" , corte);

//iOF
//NOs retorna el indice de un array, tenemos que poner el elemento que buscamos en eel array si no existe nos retorna -1
console.log("iOF", nuevaLista.indexOf("Basti")); //0
console.log("INDEXOF", nuevaLista.indexOf("Azul")); //7
console.log("INDEXOF", nuevaLista.indexOf("verde")); //-1 porque no existe

//COMBINACION DE: INDEXOF y SPLICE
let borrar = nuevaLista.indexOf ("Fernando") //lo ubicamos en el array
nuevaLista.splice (borrar, 1) //eliminamos elementos puntuales, si no especificamos la cantidad borra desde ahí para atras
console.log("INDEXOF y SPLICE:" , nuevaLista); //Esta es la manera de borrar elementos de un array! 😉

//INCLUDES
let includes = listaDeUsuarios.includes("rita") //Si existe en el array devuelve TRUE, si no existe FALSE
console.log(includes);

//REVERSE
nuevaLista.reverse() //Invierte o modifica el array original
console.log(nuevaLista);

FOR...OF
RECORRE EL ARRAY ejecutando un bloque de codigo por cada elemento del OBJETO
Si tiene 20 alumnos → 20 vueltas, 50 usuarios → 50 vueltas, 1000 personajes → 1000 vueltas
Es decir, los separa cada objeto por separado

# 7

/\*ForEach → metodo de orden superior.

let numeros = [1,2,3,4,5,6,7,8,9]
numeros .forEach(num => {
console.log("El numero es" + " " + num);
console.log("El doble del numero es" + " " + num*2);
});
*/

/\* Find → busca y retorna el primero que encuentra

const usuarios = [
{nombre: "Basti", apellido: "Gonzalez", edad:2, DNI: 58205741},
{nombre: "Jere", apellido: "Gonzalez", edad:15,DNI: 123456789},
{nombre: "Santi", apellido: "Gonzalez", edad:13, DNI:987456321}
]

const buscarNombre = (usuarios) =>{
return usuarios.DNI == 58205741
}
let resultado_find = usuarios.find(buscarNombre)
console.log(resultado_find);
\*/

/\*Filter → Retorna el arreglo con los elementos que cumplieron con esa condicion.
Se utiliza para quitar un elemento de un arreglo ej : si nombre !== Basti entonces nos deolvera "Jere" , "Santi"
const usuarios = [
{nombre: "Basti", apellido: "Gonzalez", edad:2, DNI: 58205741},
{nombre: "Jere", apellido: "Gonzalez", edad:15,DNI: 123456789},
{nombre: "Santi", apellido: "Gonzalez", edad:13, DNI:987456321}
]

const mayor_de_edad = (usuarios) =>{

    return usuarios.edad >= 10

}

let resultado_filter = usuarios.filter (mayor_de_edad)
console.log(resultado_filter);
\*/

let precioTotal = ventas.reduce (valorTotal, 0)
console.log("el valor total es:" , precioTotal);

En este ejercicio construiremos una herramienta que permita que diferentes personas puedan
llevar cuentas individuales sobre algo que deseen contabilizar, al mismo tiempo que nos brinde una contabilidad
general del total contado. Para ello:
Definir la clase Contador.
Cada instancia de contador debe ser identificada con el nombre de la persona responsable de ese conteo.
Cada instancia inicia su cuenta individual en cero.
La clase en sí misma posee un valor estático con el que lleva la cuenta de todo lo contado
// por sus instancias, el cual también inicia en cero.

class Contador {

    static cuentaGlobal = 0

    constructor(responsable) {
        this.responsable = responsable
        this.cuentaIndividual = 0
    }

    obtenerResposable(){
        return this.responsable
    }

    obtenerCuentaIndividual(){
        return this.cuentaIndividual
    }

    obtenerCuentaGlobal(){
        return Contador.cuentaGlobal;
    }

    contar (){
        this.cuentaIndividual++

    }

}
